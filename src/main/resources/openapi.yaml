openapi: 3.0.0
info:
  title: Book API
  description: Simple REST API for managing books.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /api/books:
    get:
      summary: Get All Books
      operationId: getAllBooks
      tags:
        - Books
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new Book
      operationId: createBook
      tags:
        - Books
      requestBody:
        description: JSON representation of the book to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /api/books/{id}:
    get:
      summary: Get Book by ID
      operationId: getBookById
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update Book by ID
      operationId: updateBookById
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        description: JSON with the updated book information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Updated book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete Book by ID
      operationId: deleteBookById
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The book was successfully deleted
        '404':
          description: Book not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Spring Boot in Action"
        author:
          type: string
          example: "Craig Walls"
        price:
          type: number
          format: double
          example: 29.99
